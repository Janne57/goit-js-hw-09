{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,eAAgBC,SAASC,cAAc,SACvCC,aAAcF,SAASC,cAAc,SAASE,UAGhDL,EAAKC,eAAeK,iBAAiB,UAsBrC,SAAmBC,GACjBA,EAAMC,iBAEN,IAAMC,EAAQC,OAAOV,EAAKI,aAAoB,MAAEO,OAC1CC,EAAOF,OAAOV,EAAKI,aAAmB,KAAEO,OACxCE,EAAWH,OAAOV,EAAKI,aAAqB,OAAEO,OAGpDG,WAAaC,aAAY,WAErB,I,kBA7BN,IAAuBC,EAAUC,GAAVD,EA8BDH,EA9BWI,EA8BDR,EA7BvB,IAAIS,SAAQ,SAACC,EAASC,GAE3BC,YAAW,WACaC,KAAKC,SAAW,GAGpCJ,EAAQ,CAACH,WAAUC,UAEnBG,EAAO,CAACJ,WAAUC,S,GAEnBA,E,KAoBEO,MAAK,SAAAC,G,IAAGT,EAAQS,EAART,SAAUC,EAAKQ,EAALR,MACjBS,EAAA5B,GAAS6B,OAAOC,KAAM,uBAA4CC,OAAnBb,EAAWc,EAAE,QAAwCD,OAAlCZ,EAAQL,GAAQI,EAAWc,EAAI,GAAG,M,IAErGC,OAAM,SAAAN,G,IAAGT,EAAQS,EAART,SAAUC,EAAKQ,EAALR,MAClBS,EAAA5B,GAAS6B,OAAOK,QAAS,sBAA2CH,OAAnBb,EAAWc,EAAE,QAAwCD,OAAlCZ,EAAQL,GAAQI,EAAWc,EAAI,GAAG,M,IAG3F,IAANA,GACLG,cAAcnB,W,EAVToB,EAAIrB,EAAW,EAAGqB,GAAK,EAAGA,GAAK,EAACC,EAAAD,E,GAc/CtB,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  formCreateProm: document.querySelector('.form'),\n  formElements: document.querySelector('.form').elements,\n}\n\nrefs.formCreateProm.addEventListener('submit', onSubmit);\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n     \n      if (shouldResolve) {\n        resolve({position, delay});\n      } else {\n        reject({position, delay});\n      }\n    }, delay);\n\n  });\n};\n\n\n\n\nfunction  onSubmit(event) {\n  event.preventDefault();\n\n  const delay = Number(refs.formElements['delay'].value);\n  const step = Number(refs.formElements['step'].value);\n  const position = Number(refs.formElements['amount'].value);\n  intervalId: null;\n\n  intervalId = setInterval(function timeout(){\n \n      for (let i = position - 1; i >= 0; i -= 1) {\n        createPromise(position, delay)\n        .then(({ position, delay }) => { \n          Notiflix.Notify.info (`✅ Fulfilled promise ${position - i} in ${delay + step * (position - i - 1)}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure (`❌ Rejected promise ${position - i} in ${delay + step * (position - i - 1)}ms`);\n        });\n\n          if ( i === 0 )  {\n          clearInterval(intervalId);\n        }\n      }\n    }, \nstep);\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// function perfomP () {\n//   for (let position = 0; position < 5; position += 1 ) {\n//   console.log('positionI', position);\n//   }\n// }\n// console.log(perfomP());\n\n\n// const makeGreeting = guestName => {\n//   if (guestName === \"\" || guestName === undefined) {\n//     return Promise.reject(\"Guest name must not be empty\");\n//   }\n\n//   return Promise.resolve(`Welcome ${guestName}`);\n// };\n\n// makeGreeting(\"\")\n//   .then(greeting => console.log(greeting))\n//   .catch(error => console.error(error));\n\n\n// const promise = new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     resolve(5);\n//   }, 2000);\n// });\n\n// promise\n//   .then(value => {\n//     console.log(value); // 5\n//     return value * 2;\n//   })\n//   .then(value => {\n//     console.log(value); // 10\n//     return value * 3;\n//   })\n//   .then(value => {\n//     console.log(value); // 30\n//   })\n//   .catch(error => {\n//     console.log(error);\n//   })\n//   .finally(() => {\n//     console.log(\"Final task\");\n//   });\n\n\n// setTimeout(function timeout(){\n//   console.log('hi');\n// }, 1000);\n\n// setTimeout(function timeout(){\n//   console.log('hi');\n// }, 2500);\n\n// setTimeout(function timeout(){\n//   console.log('hi');\n// }, 3500);\n\n// setTimeout(function timeout(){\n//   console.log('hi');\n// }, 4500);\n\n// setInterval(function timeoutt(){\n//   console.log('hello');\n// }, 1500);\n// let amount = 1;\n\n// intervalId = setInterval(function timeout(){\n  \n//   createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//     // console.log(position, delay);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n  \n//   // console.log('trt');\n//   if (amount > positionEl) {\n//     clearInterval(intervalId);\n//   }\n//   amount += 1;\n// }, \n// 1500);\n\n\n\n// // console.log(createPromise(3, 1500));\n\n  // createPromise(2, 1500)\n  // .then(({ position, delay }) => {\n  //   console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  //   // console.log(position, delay);\n  // })\n  // .catch(({ position, delay }) => {\n  //   console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  // });\n\n\n\n\n\n\n\n  // [1, 2, 3, 4, 5].forEach(function (i) {\n//   console.log('processing sinch');\n//   delay(); \n// });\n\n// function myCykl(array, cb){\n//   array.forEach(function () {\n//     setTimeout(cb, 0);\n//     // setTimeout(function timeout(){\n//       // console.log('hello');\n//     // }, 4500);\n\n//   })\n// };\n\n\n\n// myCykl([1, 2, 3, 4, 5], function (i) {\n//   console.log('processing asinch', i);\n//   delay();\n  \n// })\n\n// const makePromise = (text, delay) => {\n//   return new Promise(resolve => {\n//     setTimeout(() => resolve(text), delay);\n//   });\n// };\n\n// const promiseA = makePromise(\"promiseA value\", 1000);\n// const promiseB = makePromise(\"promiseB value\", 3000);\n\n// Promise.all([promiseA, promiseB])\n//   .then(value => console.log(value)) //[\"promiseA value\", \"promiseB value\"]\n//   .catch(error => console.log(error));\n\n// function perfomP (positionI) {\n// //   for (let position = 0; position =< positionI; position += 1 ) {\n// //   createPromise(position, delay)\n// //   .then(({ position, delay }) => {\n// //     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n// //     // console.log(position, delay);\n// //   })\n// //   .catch(({ position, delay }) => {\n// //     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n// //   });\n// // };\n// return console.log('positionI', positionI);\n// };\n//     var i = document.querySelector('.form').elements;\n// console.log('i', i);\n// console.log(i['delay'].value);\n// console.log(i['step']);\n// console.log(i['amount']);\n\n\n\n//   console.log('delay', delay);\n// console.log(step);\n// console.log(position);\n// const {\n//   elements: {delay, step, amount}\n// } = event.currentTarget;\n\n// const elements.delay = event.currentTarget;\n// console.log(delay.value);\n// console.log(delay.value, step.value, amount.value);\n// console.log(delay.type);\n  // console.log(event.currentTarget.value);\n  // console.log(event);\n  // console.log(event.value);\n    // console.log(refs.formElements['delay'].value);\n    // console.log(refs.formElements['step'].value);\n    // console.log(refs.formElements['amount'].value);\n\n\n    // var i = document.querySelector('.form').elements;\n// console.log('i', i);\n// console.log(i[delay]);\n// console.log(i[step]);\n// console.log(i[step]);\n\n\n// console.log(refs.formCreateProm);\n// console.log(refs.formCreateProm.value);\n// console.log(refs.amountCreateProm);"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","formCreateProm","document","querySelector","formElements","elements","addEventListener","event","preventDefault","delay1","Number","value","step","position1","intervalId","setInterval","position","delay","Promise","resolve","reject","setTimeout","Math","random","then","param","$parcel$interopDefault","Notify","info","concat","i","catch","failure","clearInterval","i1","_loop"],"version":3,"file":"03-promises.b54d8c6d.js.map"}